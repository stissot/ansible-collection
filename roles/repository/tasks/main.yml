---
# - name: 'RaspberryPIE check'
#   when: ansible_distribution == "Debian"
#   ansible.builtin.lineinfile:
#     path: /proc/kallsyms
#     regexp: raspberrypi
#     state: absent ## check mode prevents this
#   check_mode: true ## cmd overrides does not affect this
#   register: repository_internal_raspberry_check
#   tags: [deploy, remove]
#
# - name: 'RaspberryPIE check'
#   when: ansible_distribution == "Debian"
#   ansible.builtin.find:
#     path: /proc
#     file_type: file
#     # use_regex: true
#     patterns: kallsyms
#     contains: raspberrypi
#     read_whole_file: true
#   register: repository_internal_raspberry_check
#   tags: [deploy, remove]

# - debug:
#     var: repository_internal_raspberry_check

# - name: 'Override fact for RaspberryPIE devices: ansible_distribution'
#   when: >-
#     repository_internal_raspberry_check is defined
#     and repository_internal_raspberry_check.matched is defined
#     and repository_internal_raspberry_check.matched
#   ansible.builtin.set_fact:
#     ansible_distribution: Raspbian
#   tags: [deploy, remove]

- name: 'Override fact for RaspberryPIE devices: ansible_distribution'
  when: >-
    ansible_lsb is defined
    and ansible_lsb.id is defined
    and ansible_lsb.id == "Raspbian"
  ansible.builtin.set_fact:
    ansible_distribution: Raspbian
  tags: [deploy, remove]

- name: 'Assert : Supported version control'
  ansible.builtin.assert:
    that:
      - repository_internal_supported_os is true
    quiet: true
  vars:
    repository_internal_dversion: '{{ ansible_distribution_version if ansible_distribution == "Ubuntu"
        else ansible_distribution_major_version }}'
    repository_internal_supported_os: '{{
        ansible_architecture
          in repository_map_os_support[ansible_distribution][repository_internal_dversion][repository_version | string]
        if (repository_map_os_support[ansible_distribution]
              is defined
            and repository_map_os_support[ansible_distribution][repository_internal_dversion]
              is defined
            and repository_map_os_support[ansible_distribution][repository_internal_dversion][repository_version | string]
              is defined)
        else False
      }}'
  tags: [assert, deploy, config, remove]

- name: Resolve repository conflict
  tags: [deploy]
  block:
    - name: 'Package : Remove "zabbix-release" package to avoid conflict'
      become: true
      ansible.builtin.package:
        name: zabbix-release
        state: absent
        purge: '{{ true if ansible_os_family == "Debian" else omit }}'
  rescue:
    - name: 'Rescue : Source file absent'
      ansible.builtin.file:
        path: '{{ repository_internal_old_source_file[ansible_os_family] }}'
        state: absent
      vars:
        repository_internal_old_source_file:
          Debian: /etc/apt/sources.list.d/zabbix.list
          RedHat: /etc/yum.repos.d/zabbix.repo
    - name: 'Rescue : Remove "zabbix-release" package to avoid conflict'
      become: true
      ansible.builtin.package:
        name: zabbix-release
        state: absent
        purge: '{{ true if ansible_os_family == "Debian" else omit }}'

- name: 'Variables : Include system and distribution specific'
  ansible.builtin.include_vars: '{{ ansible_os_family | lower }}.yml'
  tags: [deploy, remove]
- name: Include OS packager(yum/apt) specific tasks
  ansible.builtin.include_tasks: '{{ ansible_os_family | lower }}.yml'
  tags: [deploy, remove]
